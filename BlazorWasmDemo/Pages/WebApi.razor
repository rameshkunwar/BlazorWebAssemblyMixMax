@page "/apidemo"
@inject IHttpClientFactory factory

<h3>webapi</h3>

@if (!string.IsNullOrWhiteSpace(ErrorMsg))
{
    <div class="alert-danger">@ErrorMsg</div>
}
@if (content.Count > 0)
{
    <div class="github-user__container bg-white">
        <h3 class="root__element">Github info</h3>

        @foreach (var item in content)
        {
            <div class="github-user__container github-user__container--individual-data bg-light  my-3">
                <ul class="list-group">
                <li class="list-group-item">Id: @item.Id</li>
                <li class="list-group-item">Name: @item.Name</li>
                <li class="list-group-item">Descripton: @item.Description</li>
                <li class="list-group-item">Url: @item.Url</li>
                <li class="list-group-item">HtmlUrl: @item.HtmlUrl</li>

                <li class="list-group-item">
                    <strong>Owner info</strong>
                    <ul class="list-group">
                        <li class="list-group-item">@item.Owner.Login</li>
                        <li class="list-group-item">@item.Owner.Id</li>
                    </ul>
                </li>

                <li class="list-group-item">
                    <strong>License info</strong>
                    <ul class="list-group">
                        <li class="list-group-item">Key: @item?.License?.Key</li>
                        <li class="list-group-item">Name: @item?.License?.Name</li>
                    </ul>
                </li>

            </ul>
            </div>
        }

    </div>
}
else
{
    <div class="oi oi-loop-circular">Loading...</div>
}

@code {
    List<Root> content = new List<Root>();
    protected override async Task OnInitializedAsync()
    {
        var githubOwner = new List<Owner>();
        try
        {
            var client = factory.CreateClient("github");
            var response = await client.GetAsync("users/rameshkunwar/repos");
            response.EnsureSuccessStatusCode();

            content = await response.Content.ReadAsAsync<List<Root>>().ConfigureAwait(false);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            ErrorMsg = e.Message;
        }
    }

    [Parameter]
    public string? ErrorMsg { get; set; }
}
